import cv2
import time
import mediapipe as mp
import numpy as np
from flask import Flask, jsonify

app = Flask(__name__)

# MediaPipe 초기화
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(refine_landmarks=True)

# 졸음 상태 변수
drowsy = False

# EAR 계산 함수
def calculate_ear(landmarks, eye_indices):
    points = [landmarks[i] for i in eye_indices]
    vertical1 = np.linalg.norm(np.array(points[1]) - np.array(points[5]))
    vertical2 = np.linalg.norm(np.array(points[2]) - np.array(points[4]))
    horizontal = np.linalg.norm(np.array(points[0]) - np.array(points[3]))
    ear = (vertical1 + vertical2) / (2.0 * horizontal)
    return ear

# 졸음 감지 루프
def detect_drowsiness_loop():
    global drowsy
    cap = cv2.VideoCapture(0, cv2.CAP_V4L2)

    if not cap.isOpened():
        print("Camera failed to open!")
        return

    EYE_AR_THRESH = 0.23
    EYE_AR_CONSEC_FRAMES = 30
    counter = 0

    LEFT_EYE = [33, 160, 158, 133, 153, 144]
    RIGHT_EYE = [362, 385, 387, 263, 373, 380]

    while True:
        ret, frame = cap.read()
        if not ret:
            continue

        # 이미지 처리
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = face_mesh.process(rgb)

        if results.multi_face_landmarks:
            for face_landmarks in results.multi_face_landmarks:
                h, w, _ = frame.shape
                landmarks = [(int(p.x * w), int(p.y * h)) for p in face_landmarks.landmark]

                left_ear = calculate_ear(landmarks, LEFT_EYE)
                right_ear = calculate_ear(landmarks, RIGHT_EYE)
                ear = (left_ear + right_ear) / 2.0

                if ear < EYE_AR_THRESH:
                    counter += 1
                    if counter >= EYE_AR_CONSEC_FRAMES:
                        drowsy = True
                        cv2.putText(frame, "DROWSY", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)
                else:
                    counter = 0
                    drowsy = False

        # 영상 출력
        cv2.imshow("Drowsiness Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

@app.route('/detect_drowsiness', methods=['GET'])
def detect_drowsiness():
    detect_drowsiness_loop()
    return jsonify({'drowsy': drowsy})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
