from flask import Flask, jsonify
import cv2
import mediapipe as mp
import numpy as np
import threading
import time

app = Flask(__name__)
drowsy = False

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(
    max_num_faces=1,
    refine_landmarks=True,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5,
)

# EAR 계산을 위한 눈 좌표 인덱스
LEFT_EYE = [33, 160, 158, 133, 153, 144]
RIGHT_EYE = [362, 385, 387, 263, 373, 380]

def eye_aspect_ratio(landmarks, eye_indices):
    p1 = np.array([landmarks[eye_indices[1]].x, landmarks[eye_indices[1]].y])
    p2 = np.array([landmarks[eye_indices[5]].x, landmarks[eye_indices[5]].y])
    p3 = np.array([landmarks[eye_indices[2]].x, landmarks[eye_indices[2]].y])
    p4 = np.array([landmarks[eye_indices[4]].x, landmarks[eye_indices[4]].y])
    p5 = np.array([landmarks[eye_indices[0]].x, landmarks[eye_indices[0]].y])
    p6 = np.array([landmarks[eye_indices[3]].x, landmarks[eye_indices[3]].y])
    
    vertical1 = np.linalg.norm(p2 - p4)
    vertical2 = np.linalg.norm(p3 - p5)
    horizontal = np.linalg.norm(p1 - p6)
    ear = (vertical1 + vertical2) / (2.0 * horizontal)
    return ear

def detect_drowsiness_loop():
    global drowsy
    cap = cv2.VideoCapture(0)

    EYE_AR_THRESH = 0.23
    EYE_AR_CONSEC_FRAMES = 30
    counter = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            continue

        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = face_mesh.process(rgb)

        if results.multi_face_landmarks:
            landmarks = results.multi_face_landmarks[0].landmark
            left_ear = eye_aspect_ratio(landmarks, LEFT_EYE)
            right_ear = eye_aspect_ratio(landmarks, RIGHT_EYE)
            avg_ear = (left_ear + right_ear) / 2.0

            if avg_ear < EYE_AR_THRESH:
                counter += 1
            else:
                counter = 0

            if counter >= EYE_AR_CONSEC_FRAMES:
                drowsy = True
            else:
                drowsy = False

        time.sleep(0.03)  # 약 30 FPS

@app.route('/detect_drowsiness', methods=['GET'])
def detect_drowsiness_api():
    return jsonify({"drowsy": drowsy})

if __name__ == '__main__':
    t = threading.Thread(target=detect_drowsiness_loop)
    t.daemon = True
    t.start()
    app.run(host='0.0.0.0', port=5000)
